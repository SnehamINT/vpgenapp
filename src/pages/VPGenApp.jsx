import React, { useState } from 'react';
import { Copy, Download, RefreshCw, History, Rocket, Eye } from 'lucide-react';
import { generateValuePropositions as generateWithGemini } from '../api/api';

const VPGenApp = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    industry: '',
    customIndustry: '',
    challenge: '',
    customChallenge: '',
    goal: '',
    companyName: '',
    clientContext: '',
    tone: ''
  });
  
  const [generatedPropositions, setGeneratedPropositions] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [history, setHistory] = useState([]);
  const [viewingHistoryItem, setViewingHistoryItem] = useState(null);

  const industries = [
    'Healthcare & Pharmaceuticals',
    'Retail & E-Commerce',
    'Banking & Financial Services',
    'Manufacturing & Supply Chain',
    'Information Technology & Software',
    'Education & EdTech',
    'Energy & Utilities',
    'Government & Public Sector',
    'Hospitality & Travel',
    'Logistics & Transportation',
    'Media & Entertainment',
    'Other'
  ];

  const challenges = [
    'High Operational Costs',
    'Poor Customer Retention / Churn',
    'Legacy Systems / Slow Digital Adoption',
    'Compliance & Regulatory Risks',
    'Low Employee Engagement',
    'Inefficient Operations',
    'Limited Market Expansion',
    'Scaling Issues',
    'Product / Service Differentiation',
    'Competition Pressure',
    'Budget Constraints',
    'Other'
  ];

  const tones = ['Formal', 'Persuasive', 'Friendly', 'Data-Driven'];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const generateValuePropositions = async () => {
    setIsGenerating(true);
    
    try {
      const propositions = await generateWithGemini(formData);
      setGeneratedPropositions(propositions);
      
      // Add to history
      const newHistoryItem = {
        id: Date.now(),
        timestamp: new Date().toLocaleString(),
        inputs: { ...formData },
        propositions: propositions
      };
      setHistory(prev => [newHistoryItem, ...prev]);
      
      setCurrentStep(2);
    } catch (error) {
      console.error('Error generating value propositions:', error);
      // Show error message to user (you can add a toast notification here)
      alert('Error generating value propositions. Please check your API key and try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const [copiedIndex, setCopiedIndex] = useState(null);

  const copyToClipboard = async (text, index) => {
    try {
      if (navigator.clipboard && navigator.clipboard.writeText) {
        await navigator.clipboard.writeText(text);
      } else {
        const textarea = document.createElement('textarea');
        textarea.value = text;
        textarea.setAttribute('readonly', '');
        textarea.style.position = 'absolute';
        textarea.style.left = '-9999px';
        document.body.appendChild(textarea);
        textarea.select();
        document.execCommand('copy');
        document.body.removeChild(textarea);
      }
      setCopiedIndex(index);
      setTimeout(() => setCopiedIndex(null), 1500);
    } catch (err) {
      console.error('Copy failed', err);
      alert('Failed to copy. Please copy manually.');
    }
  };

  const downloadAsDOCX = () => {
    // Create DOCX content with proper formatting
    const industry = formData.industry === 'Other' ? formData.customIndustry : formData.industry;
    const challenge = formData.challenge === 'Other' ? formData.customChallenge : formData.challenge;
    
    const docContent = `VALUE PROPOSITION REPORT
Generated by VPGen üöÄ
Date: ${new Date().toLocaleDateString()}

INPUT PARAMETERS:
Industry: ${industry}
Challenge: ${challenge}
Goal: ${formData.goal}
Company Name: ${formData.companyName || 'Not specified'}
Client Context: ${formData.clientContext || 'Not specified'}
Tone: ${formData.tone}

GENERATED VALUE PROPOSITIONS:

Draft 1:
${generatedPropositions[0] || ''}

Draft 2:
${generatedPropositions[1] || ''}

Draft 3:
${generatedPropositions[2] || ''}

---
Generated using VPGen - Value Proposition Generator
For more information, visit our platform.`;

    // Create blob with proper DOCX MIME type
    const blob = new Blob([docContent], { 
      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' 
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `vpgen-report-${Date.now()}.docx`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const clearForm = () => {
    setFormData({
      industry: '',
      customIndustry: '',
      challenge: '',
      customChallenge: '',
      goal: '',
      companyName: '',
      clientContext: '',
      tone: ''
    });
  };

  const viewHistoryItem = (item) => {
    setViewingHistoryItem(item);
  };

  const closeHistoryView = () => {
    setViewingHistoryItem(null);
  };

  const canGenerate = formData.industry && formData.challenge && formData.goal && formData.tone;

  // History Detail View Modal
  if (viewingHistoryItem) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center gap-2">
              {/* <div className="w-10 h-10 bg-purple-600 rounded-lg flex items-center justify-center">
                <Rocket className="w-6 h-6 text-white" />
              </div> */}
              {/* <span className="text-xl font-semibold">VPGen üöÄ</span> */}
              <img src="./Logo.png" alt="" className='site_logo' />
            </div>
            <button
              onClick={closeHistoryView}
              className="px-4 py-2 text-purple-600 hover:bg-purple-50 rounded-lg transition-colors"
            >
              ‚Üê Back to Results
            </button>
          </div>

          {/* History Detail */}
          <div className="bg-white rounded-xl shadow-sm p-8 mb-6 border">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-semibold">Historical Generation</h2>
              <span className="text-sm text-gray-500">{viewingHistoryItem.timestamp}</span>
            </div>
            
            {/* Input Parameters */}
            <div className="mb-8 p-6 bg-gray-50 rounded-lg">
              <h3 className="text-lg font-semibold mb-4">Input Parameters</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div><span className="font-medium">Industry:</span> {viewingHistoryItem.inputs.industry === 'Other' ? viewingHistoryItem.inputs.customIndustry : viewingHistoryItem.inputs.industry}</div>
                <div><span className="font-medium">Challenge:</span> {viewingHistoryItem.inputs.challenge === 'Other' ? viewingHistoryItem.inputs.customChallenge : viewingHistoryItem.inputs.challenge}</div>
                <div><span className="font-medium">Goal:</span> {viewingHistoryItem.inputs.goal}</div>
                <div><span className="font-medium">Tone:</span> {viewingHistoryItem.inputs.tone}</div>
                {viewingHistoryItem.inputs.companyName && (
                  <div><span className="font-medium">Company Name:</span> {viewingHistoryItem.inputs.companyName}</div>
                )}
                {viewingHistoryItem.inputs.clientContext && (
                  <div className="md:col-span-2"><span className="font-medium">Client Context:</span> {viewingHistoryItem.inputs.clientContext}</div>
                )}
              </div>
            </div>

            {/* Generated Propositions */}
            <div>
              <h3 className="text-lg font-semibold mb-4">Generated Value Propositions</h3>
              <div className="space-y-4">
                {viewingHistoryItem.propositions.map((proposition, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-2">
                      <h4 className="text-md font-medium text-gray-900">Draft {index + 1}</h4>
                      <button
                        onClick={() => copyToClipboard(proposition, index)}
                        className="flex items-center gap-1 px-2 py-1 text-sm text-gray-600 hover:bg-gray-100 rounded-md transition-colors"
                      >
                        <Copy className="w-3 h-3" />
                        {copiedIndex === index ? 'Copied' : 'Copy'}
                      </button>
                    </div>
                    <p className="text-gray-800 leading-relaxed">{proposition}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (currentStep === 2) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center gap-2">
              {/* <div className="w-10 h-10 bg-purple-600 rounded-lg flex items-center justify-center">
                <Rocket className="w-6 h-6 text-white" />
              </div> */}
              {/* <span className="text-xl font-semibold">VPGen üöÄ</span> */}
              <img src="./Logo.png" alt="" className='site_logo' />
            </div>
            <button
              onClick={() => setCurrentStep(1)}
              className="px-4 py-2 text-purple-600 hover:bg-purple-50 rounded-lg transition-colors"
            >
              ‚Üê Back to Form
            </button>
          </div>

          {/* Generated Propositions */}
          <div className="bg-white rounded-xl shadow-sm p-8 mb-6 border">
            <h2 className="text-2xl font-semibold mb-6">Generated Value Propositions</h2>
            
            <div className="space-y-6">
              {generatedPropositions.map((proposition, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-6">
                  <div className="flex justify-between items-start mb-4">
                    <h3 className="text-lg font-medium text-gray-900">Draft {index + 1}</h3>
                    <button
                      onClick={() => copyToClipboard(proposition, index)}
                      className="flex items-center gap-2 px-3 py-1 text-sm text-gray-600 hover:bg-gray-100 rounded-md transition-colors"
                    >
                      <Copy className="w-4 h-4" />
                      {copiedIndex === index ? 'Copied' : 'Copy'}
                    </button>
                  </div>
                  <p className="text-gray-800 leading-relaxed">{proposition}</p>
                </div>
              ))}
            </div>

            <div className="flex gap-3 mt-8">
              <button
                onClick={generateValuePropositions}
                disabled={isGenerating}
                className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 transition-colors"
              >
                <RefreshCw className={`w-4 h-4 ${isGenerating ? 'animate-spin' : ''}`} />
                {isGenerating ? 'Regenerating...' : 'Regenerate'}
              </button>
              
              <button
                onClick={downloadAsDOCX}
                className="flex items-center gap-2 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <Download className="w-4 h-4" />
                Download DOCX
              </button>
            </div>
          </div>

          {/* History */}
          {history.length > 0 && (
            <div className="bg-white rounded-xl shadow-sm p-8 border">
              <h3 className="text-xl font-semibold mb-6 flex items-center gap-2">
                <History className="w-5 h-5" />
                Generation History
              </h3>
              <div className="space-y-4">
                {history.slice(0, 3).map((item) => (
                  <div key={item.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <div className="text-sm text-gray-500 mb-2">{item.timestamp}</div>
                        <div className="text-sm">
                          <span className="font-medium">Industry:</span> {item.inputs.industry === 'Other' ? item.inputs.customIndustry : item.inputs.industry} | 
                          <span className="font-medium"> Challenge:</span> {item.inputs.challenge === 'Other' ? item.inputs.customChallenge : item.inputs.challenge}
                        </div>
                      </div>
                      <button
                        onClick={() => viewHistoryItem(item)}
                        className="flex items-center gap-2 px-3 py-1 text-sm text-purple-600 hover:bg-purple-50 rounded-md transition-colors ml-4"
                      >
                        <Eye className="w-4 h-4" />
                        View
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-2xl mx-auto">
        {/* Header */}
        <div className="flex items-center gap-2 mb-4">
          {/* <div className="w-10 h-10 bg-purple-600 rounded-lg flex items-center justify-center">
            <Rocket className="w-6 h-6 text-white" />
          </div> */}
          {/* <span className="text-xl font-semibold">VPGen üöÄ</span> */}
          <img src="./Logo.png" alt="" className='site_logo' />
        </div>

        {/* Progress */}
        {/* <div className="flex items-center justify-between mb-8">
          <span className="text-sm text-gray-600">Step 1 of 2</span>
          <span className="text-sm text-gray-600">50%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2 mb-8">
          <div className="bg-purple-600 h-2 rounded-full" style={{ width: '50%' }}></div>
        </div> */}

        {/* Form */}
        <div className="bg-white rounded-xl shadow-sm p-8 border">
          <h1 className="text-2xl font-semibold mb-2">Create Your Value Proposition</h1>
          <p className="text-gray-600 mb-8">Fill in the details below to generate a powerful value proposition.</p>

          <div className="space-y-6">
            {/* Industry and Challenge Row */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Industry</label>
                <select
                  value={formData.industry}
                  onChange={(e) => handleInputChange('industry', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                >
                  <option value="">Select an industry...</option>
                  {industries.map(industry => (
                    <option key={industry} value={industry}>{industry}</option>
                  ))}
                </select>
                {formData.industry === 'Other' && (
                  <input
                    type="text"
                    placeholder="Enter custom industry"
                    value={formData.customIndustry}
                    onChange={(e) => handleInputChange('customIndustry', e.target.value)}
                    className="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  />
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Challenge</label>
                <select
                  value={formData.challenge}
                  onChange={(e) => handleInputChange('challenge', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                >
                  <option value="">Select a challenge...</option>
                  {challenges.map(challenge => (
                    <option key={challenge} value={challenge}>{challenge}</option>
                  ))}
                </select>
                {formData.challenge === 'Other' && (
                  <input
                    type="text"
                    placeholder="Enter custom challenge"
                    value={formData.customChallenge}
                    onChange={(e) => handleInputChange('customChallenge', e.target.value)}
                    className="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                  />
                )}
              </div>
            </div>

            {/* Goal */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Goal</label>
              <input
                type="text"
                placeholder="e.g., Increase user engagement by 20%"
                value={formData.goal}
                onChange={(e) => handleInputChange('goal', e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
              />
            </div>

            {/* Company Name and Tone Row */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Company Name</label>
                <input
                  type="text"
                  placeholder="e.g., Acme Corporation"
                  value={formData.companyName}
                  onChange={(e) => handleInputChange('companyName', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Tone</label>
                <select
                  value={formData.tone}
                  onChange={(e) => handleInputChange('tone', e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                >
                  <option value="">Select a tone...</option>
                  {tones.map(tone => (
                    <option key={tone} value={tone}>{tone}</option>
                  ))}
                </select>
              </div>
            </div>

            {/* Client Context */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Client Context</label>
              <textarea
                placeholder="Describe your target client..."
                rows={4}
                value={formData.clientContext}
                onChange={(e) => handleInputChange('clientContext', e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 resize-none"
              />
            </div>
          </div>

          {/* Buttons */}
          <div className="flex gap-3 mt-8">
            <button
              onClick={clearForm}
              className="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Clear Form
            </button>
            <button
              onClick={generateValuePropositions}
              disabled={!canGenerate || isGenerating}
              className="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {isGenerating ? 'Generating...' : 'Generate Value Proposition'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VPGenApp;